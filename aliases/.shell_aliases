# General {{{
# ==============================================================================

    alias ..='cd ..'
    alias cd..='cd ..'

    # cd into a given directory and ls its content
    function cl() {
        DIR="$*"
        if [ $# -lt 1 ]; then
            DIR=$HOME
        fi
        builtin cd "${DIR}" && ls -la
    }

    alias v='nvim'
    alias vim='nvim'
    alias mux='tmuxinator'
    alias cat='bat'
    alias lolcat='lolcat-c'

    alias copy='xclip -selection clipboard'
    alias paste='xclip -o -selection clipboard'

# }}}

# Default flags {{{
# ==============================================================================

    alias df='df -h'
    alias mkdir='mkdir -pv'

# }}}


# ls {{{
# ==============================================================================

    alias ll='ls -AlF'
    alias la='ls -A'
    alias l='ls -F1sh'
    alias lf='ll -p | grep -v /' # list only files
    alias ld='ll -p | grep /' # list only directories
    alias l.='ls -ld .*' # list only dot files
    alias lt='ls -F1shS' # sort by size
    alias ltd='du -sh * | sort -hr' # sort by size but count also directories
    alias lm='ls -tgGh --time-style=long-iso' # sort by modification time

# }}}

# php stuff {{{
# ==============================================================================

    alias pa='php artisan'
    alias pat='php artisan tinker'
    alias patt='while true; do php artisan tinker; done'

    #alias pu='phpunit --testdox'
    #alias puf='phpunit --testdox --filter'
    #alias pui='phpunit --group integration --testdox'
    #alias puif='phpunit --group integration --testdox --filter'
    alias pu='./vendor/bin/phpunit'
    alias puc='./vendor/bin/phpunit --coverage-html build/coverage-report'
    alias puf='./vendor/bin/phpunit --filter'
    alias pufc='./vendor/bin/phpunit --coverage-html build/coverage-report --filter'
    alias pug='./vendor/bin/phpunit --group'
    alias pui='./vendor/bin/phpunit --group integration'
    alias puif='./vendor/bin/phpunit --group integration --filter'

    alias pe='./vendor/bin/pest'
    alias pef='./vendor/bin/pest --filter'
    alias pec='./vendor/bin/pest --coverage'

    alias sail='bash vendor/bin/sail'
    alias s='bash vendor/bin/sail'
    alias sa='bash vendor/bin/sail artisan'
    alias sc='bash vendor/bin/sail composer'
    alias sat='bash vendor/bin/sail artisan tinker'
    alias satt='while true; do bash vendor/bin/sail artisan tinker; done'

# }}}

# npm {{{
# ==============================================================================

    alias nr='npm run'
    alias npr='npm run'
    alias npl='npm list --depth=0'
    alias nplg='npm list -g --depth=0'
    alias npu='npm-check -u'
    alias npug='npm-check -gu'
    alias npa='npm audit'
    alias npaf='npm audit fix'

# }}}

# Docker {{{
# ==============================================================================

    alias d='docker'
    alias dc='docker-compose'
    alias dcu='docker-compose up'
    alias dce='docker-compose exec'
    alias dcea='docker-compose exec app'
    dceas() ( docker-compose exec app su app -c "$*" )
    alias dceasa='dceas php artisan'
    alias dcr='docker-compose run'
    alias dcrr='docker-compose run --rm -u "$(id -u):$(id -g)"'

# }}}

# git {{{
# ==============================================================================

    # cd into the root of this repository
    alias cg='cd `git rev-parse --show-toplevel`'

    alias ga='git add'
    alias gap='git add -p'
    alias gaa='git add -A'
    alias gall='git add -A'
    alias gus='git reset HEAD'
    alias gpristine='git reset --hard && git clean -dfx'
    alias gclean='git clean -fd'
    alias gs='git status'
    # status short
    alias gss='git status -s'
    alias gp='git push'
    alias gpo='git push origin'
    alias gd='git diff'
    alias gds='git diff --staged'
    alias gc='git commit -v'
    alias gca='git commit -v -a'
    alias gcm='git commit -v -m'
    alias gcam="git commit -v -am"
    alias gci='git commit --interactive'
    # Add uncommitted and unstaged changes to the last commit
    alias gcaa="git commit -a --amend -C HEAD"
    alias gco='git checkout'
    alias gcom='git checkout master'
    alias gcb='git checkout -b'
    alias gcob='git checkout -b'
    alias gct='git checkout --track'
    alias gcpd='git checkout master; git pull; git branch -D'
    alias gst='git stash'
    alias gstb='git stash branch'
    alias gstd='git stash drop'
    alias gstl='git stash list'
    alias gstp='git stash pop'
    # Show untracked files
    alias gu='git ls-files . --exclude-standard --others'

    alias gl='git log'
    alias glp='git log -p'
    alias gg="git log --graph --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%C(yellow)%d%Creset'"
    alias ggs='gg --stat'
    alias gwc='git whatchanged'
    # Show commits since last pull
    alias gnew='git log HEAD@{1}..HEAD@{0}'

    # quickly setup a repo with git worktree
    # see: https://infrequently.org/2021/07/worktrees-step-by-step/
    gitclone () {
        if [ $# -ne 2 ]; then
            echo "Usage: gitclone url dirname"
            return 1
        fi

        mkdir $2
        cd $2
        git clone --bare $1 .bare
        echo "gitdir: ./.bare" > .git
        git worktree add main
    }

# }}}

# VirtualBox {{{
# ==============================================================================

    alias vbm='vboxmanage'
    alias vbml='vboxmanage list'
    alias vbmm='vboxmanage modifyvm'
    alias vbms='vboxmanage showvminfo'

# }}}

# Sounds and notifications {{{
# ==============================================================================

    # use: beep [pitch 0-50] [volume .01-1] [length .1-x]
    beep() (
        _S=${1:-0}; _V=${2:-0.3}; _L=${3:-0.1}
        _SINE=$(expr 200 + 200 \* $_S)
        play -qn -t alsa synth $_L sin $_SINE vol $_V
    )

    tone1() ( beep 0 .1; beep; beep 0 .6; beep 3 .6; beep 3; beep 3 .1; )
    tone2() ( beep 0 .1; beep 0 .1; beep 4 .3; )
    tone3() ( play -nq -t alsa synth 0.2 sin 400 : synth 0.2 sin 600 : synth 0.2 sin 300 )
    tone4() ( play -qn -t alsa synth .1 sin 100-1800 synth .1 sin fmod 1500-100 )
    tone5() ( play -nq -t alsa synth 0.2 sin 600-100 : synth 0.2 sin 100-600 )

    say() ( echo $1 | festival --tts )
    psay() ( spd-say -wl pl -i -50 "$1" )

    # use: pop "my notification text"
    alias pop='notify-send'

    # use: super-slow-command; b
    b() ( say 'done'; zenity --info --width=550 --text "DATE: $(date); \n PWD: $(pwd)" & )

# }}}

# KDE {{{
# ==============================================================================

    alias start_plasma='kstart5 plasmashell'
    alias restart_plasma='kquitapp5 plasmashell && kstart5 plasmashell'

# }}}

# Trash (instead of rm) {{{
# ==============================================================================

    alias rrm='trash' # rrm FILENAME # move file to trash
    alias rrml='trash-list' # show trashcan content
    alias rrmr='trash-restore' # show trashed files in current folder and allow to restore them
    alias rrmm='trash-rm' # rrmm PATTERN # remove files matching the PATTERN from trashcan
    alias rrmc='trash-empty' # remove all files from trashcan

# }}}

# local dev {{{
# ==============================================================================

    alias php_list='sudo update-alternatives --list php'
    alias php_switch_74='sudo update-alternatives --set php /usr/bin/php7.4'
    alias php_switch_80='sudo update-alternatives --set php /usr/bin/php8.0'
    alias php_switch_81='sudo update-alternatives --set php /usr/bin/php8.1'

    function db {
        if [ "$1" = "reset" ]; then
            mysql -utoor -e "drop database $2; create database $2"
        elif [ "$1" = "create" ]; then
            mysql -utoor -e "create database $2"
        elif [ "$1" = "drop" ]; then
            mysql -utoor -e "drop database $2"
        elif [ "$1" = "list" ]; then
            mysql -utoor -e "show databases"
        fi
    }

    # create db based on $DB_NAME set in .env
    function create_db {
        DB_NAME=$(awk -F "=" '/DB_DATABASE/ {print $2}' .env)
        echo "Creating database $DB_NAME"
        mysql -utoor -e "CREATE DATABASE ${DB_NAME};"
    }

    # quickly serve current directory on port 8000
    alias serve='python -m SimpleHTTPServer'

# }}}

# Other stuff {{{
# ==============================================================================

    alias dudu='ncdu'
    alias path='echo -e ${PATH//:/\\n}'
    alias now='date +"%T"'
    alias nowtime=now
    alias nowdate='date +"%d-%m-%Y"'

    # line wrapping in terminal
    alias nowrap="printf '\033[?7l'"
    alias wrap="printf '\033[?7h'"

    # quickly list mounted drives (as `mount` output is too verbose)
    alias mnt="mount | awk -F' ' '{ printf \"%s\t%s\n\",\$1,\$3; }' | column -t | egrep ^/dev/ | sort"

    # show pid of selected window
    alias winpid="xprop _NET_WM_PID | sed 's/_NET_WM_PID(CARDINAL) = //'"

    # alternative to `cp` using rsync - shows copying progress
    alias cpv='rsync -ah --info=progress2'

    # quickly check if a given port is being used
    #  use: port 80
    port() ( ss -peanut | grep ":$1" | grep LISTEN )
    alias ports='ss -peanut | grep LISTEN'

    open() ( xdg-open $* > /dev/null 2>&1 )

    alias aliases='subl ~/.shell_aliases'

    # ls -la | tosubl
    alias tosubl='subl -n -'
    alias tosubll='subl -'

# }}}
